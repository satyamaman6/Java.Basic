import javax.naming.Name;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.*;

public class MyGame extends JFrame implements ActionListener {

    JLabel Heading;
    JLabel clockLable;

    JPanel mainpanel;

    JButton []btns=new JButton[9];

    Font font = new Font(null, Font.BOLD, 20);

    //Game and Instacne Variable
    int gamechances[] = {2,2,2,2,2,2,2,2,2};
    int activePlayer =0;


    int wps[][] ={
            {0,1,2},{3,4,5},{6,7,8},
            {0,3,6},{1,4,7},{25,5,8},
            {0,4,8},{2,4,6}
    };

    int winner =2;

    boolean gameover = false;

    MyGame() {

        setTitle("Tic Tac Toe");
        setSize(500, 500);
        setLocation(500,100);
        ImageIcon icon = new ImageIcon("src/img/icon.png");
        setIconImage(icon.getImage());

        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        createGUI();

        setVisible(true);
    }

    private void createGUI()
    {


        this.getContentPane().setBackground(Color.decode("#808000"));
        this.setLayout(new BorderLayout());

        //north Heading

        Heading = new JLabel("Tic Tac Toe");
        Heading.setIcon(new ImageIcon(("src/img.icon.png")));
        Heading.setFont(font);
        Heading.setHorizontalAlignment(SwingConstants.CENTER);
        Heading.setForeground(Color.BLACK);

        this.add(Heading, BorderLayout.NORTH);

        //Creating Object of JLable for Clock

        clockLable = new JLabel("Clock");
        clockLable.setForeground(Color.BLACK);

        clockLable.setFont(font);
        clockLable.setHorizontalAlignment(SwingConstants.CENTER);


        this.add(clockLable, BorderLayout.SOUTH);


        Thread t = new Thread() {
            public void run() {
                try {
                    while (true) {
                        String datetime = new Date().toLocaleString();

                        clockLable.setText(datetime);

                        Thread.sleep(1000);
                    }

                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        };
        t.start();
//Creating Main Panel Section...
        mainpanel=new JPanel();

        mainpanel.setLayout(new GridLayout(3,3));

        for( int i =1; i<=9; i++)
        {
            JButton btn=new JButton();
            btn.setBackground(Color.BLACK);
            btn.setFont(font);
            mainpanel.add(btn);
            btns[i-1]=btn;
            btn.addActionListener(this);
            btn.setName(String.valueOf(i-1));

        }
        this.add(mainpanel,BorderLayout.CENTER);

    }

    @Override
    public void actionPerformed(ActionEvent e) {

        JButton currentButton=(JButton) e.getSource();

        String nameStr=currentButton.getName();

        int name=Integer.parseInt(nameStr.trim());

        if (gameover){
            JOptionPane.showMessageDialog(this,"Game is Finished");
            return;
        }



        if(gamechances[name]==2)
        {
            if(activePlayer==1)
            {
                currentButton.setIcon(new ImageIcon("src/img/x.png"));

                gamechances [name]= activePlayer;
                activePlayer=0;
            }else
            {
                currentButton.setIcon((new ImageIcon("src/img/0.png")));

                gamechances[name] = activePlayer;
                activePlayer=1;
            }
            //Finding Winner

            for (int []temp:wps)
            {
                if((gamechances[temp[0]]==gamechances[temp[1]])
                &&(gamechances[temp[1]]==gamechances[temp[2]])&&gamechances[temp[2]]!=2)
                {
                    winner=gamechances[temp[0]];
                    gameover=true;

                    JOptionPane.showMessageDialog(null,"Player "+winner+ " Has Won The Game");
                    int i = JOptionPane.showConfirmDialog(this, "Would You Like TO Restart");
                    if(i==0)
                    {
                        this.setVisible(false);
                        new MyGame();
                    }else if (i==1)
                    {
                        System.exit(123456);
                    }
                    System.out.println(i);
                    break;
                }
            }


            //Draw Logic
            int c =0;
            for(int x:gamechances)
            {
                if(x==2)
                {
                    c++;
                    break;
                }
            }
            if(c==0&&gameover==false){
                JOptionPane.showMessageDialog(null,"It's Draw");

                int i = JOptionPane.showConfirmDialog(this,"Want To Play More");
                if(i==0){
                    this.setVisible(false);
                    new MyGame();
                }else if(i==1){
                    System.exit(123456);
                }else {

                }
                gameover=true;
            }


        }
        else
        {
            JOptionPane.showMessageDialog(this,"Position Not Available");
        }
    }
}
